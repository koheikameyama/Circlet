rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ユーザーコレクション
    match /users/{userId} {
      // ドキュメントの読み取りとクエリを許可
      allow read, list: if request.auth != null;
      // 自分のドキュメントのみ書き込み可能、またはcircleIdsの更新は誰でも可能（サークル管理用）
      allow write: if request.auth != null &&
        (request.auth.uid == userId ||
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['circleIds', 'updatedAt']));
      // 新規ユーザー作成時のために create も許可
      allow create: if request.auth != null;
    }

    // サークルコレクション
    match /circles/{circleId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      // 認証済みユーザーは更新可能（アプリ側で権限チェック）
      allow update: if request.auth != null;
      allow delete: if request.auth != null;
    }

    // イベントコレクション
    match /events/{eventId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null;
    }

    // 支払いコレクション
    match /payments/{paymentId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null;
    }

    // 通知コレクション
    match /notifications/{notificationId} {
      allow read: if request.auth != null &&
        request.auth.uid in resource.data.recipientUserIds;
      allow create: if request.auth != null;
    }

    // 招待リンクコレクション
    match /invites/{inviteId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null &&
        resource.data.createdBy == request.auth.uid;
      // サークル削除時に全ての招待を削除できるよう、認証済みユーザーに削除を許可
      allow delete: if request.auth != null;
    }
  }
}
